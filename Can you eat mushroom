{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"},{"sourceId":3918849,"sourceType":"datasetVersion","datasetId":2327251},{"sourceId":192934997,"sourceType":"kernelVersion"},{"sourceId":192988856,"sourceType":"kernelVersion"},{"sourceId":193224738,"sourceType":"kernelVersion"},{"sourceId":193240295,"sourceType":"kernelVersion"},{"sourceId":193241746,"sourceType":"kernelVersion"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/darkdevil18/0-98530-can-you-eat?scriptVersionId=193305388\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"<center><h1 style=\"font-size:48px\"> üçÑ Mushroom Classification üçÑ‚Äçüü´ </h1>\n<img src=\"https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExMDg3ODMzZmJtaWYzcWdmdGpjejh2cGVmcnhvODljcXFiNzZvam9vNSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/yh3E9kaUHjKaXtF9v1/giphy.gif\"></center>\n\n\n# Feature Description\n<div class=\"alert alert-block alert-info\" style=\"font-family: verdana; font-size: 16px; line-height: 1.7;\">\n    <ol>\n        <li><p><strong>Cap Diameter</strong>: The measurement of the cap across its widest point. It helps in identifying the mushroom‚Äôs size and can range from a few millimeters to several centimeters.</p>\n        </li>\n        <li><p><strong>Cap Shape</strong>: The overall shape of the cap, such as conical, bell-shaped, flat, or wavy. This characteristic helps in distinguishing different species.</p>\n        </li>\n        <li><p><strong>Cap Surface</strong>: The texture and appearance of the cap‚Äôs surface. It can be smooth, scaly, sticky, or wrinkled, providing clues about the mushroom‚Äôs identity.</p>\n        </li>\n        <li><p><strong>Cap Color</strong>: The color of the cap, which can vary widely and may change as the mushroom matures. Color can be a key factor in identifying species.</p>\n        </li>\n        <li><p><strong>Does Bruise or Bleed</strong>: Refers to whether the mushroom changes color when bruised or if it releases a colored liquid. This reaction can be important for identification.</p>\n        </li>\n        <li><p><strong>Gill Attachment</strong>: How the gills are attached to the stem. They can be free (not attached), attached (connected to the stem), or descending (extending down the stem).</p>\n        </li>\n        <li><p><strong>Gill Spacing</strong>: The distance between gills. Gills can be crowded, spaced, or intermediate in their spacing.</p>\n        </li>\n        <li><p><strong>Gill Color</strong>: The color of the gills, which can help in distinguishing species and may change with age.</p>\n        </li>\n        <li><p><strong>Stem Height</strong>: The length of the stem from the ground to where the cap is attached. Variations in stem height can aid in identification.</p>\n        </li>\n        <li><p><strong>Stem Width</strong>: The diameter of the stem. It can be narrow, medium, or wide, and varies among species.</p>\n        </li>\n        <li><p><strong>Stem Root</strong>: The base of the stem, which can be swollen, bulbous, or tapering. Observing the stem‚Äôs base can help identify certain mushrooms.</p>\n        </li>\n        <li><p><strong>Stem Surface</strong>: The texture and appearance of the stem‚Äôs surface. It can be smooth, fibrous, scaly, or rough.</p>\n        </li>\n        <li><p><strong>Stem Color</strong>: The color of the stem, which might be uniform or vary along its length.</p>\n        </li>\n        <li><p><strong>Veil Type</strong>: Refers to the type of veil present on the mushroom, such as a partial veil (covering the gills and often forming a ring) or a universal veil (enveloping the entire mushroom in its early stages).</p>\n        </li>\n        <li><p><strong>Veil Color</strong>: The color of the veil. It can be a key characteristic for identifying mushrooms, especially in distinguishing between species with similar appearances.</p>\n        </li>\n        <li><p><strong>Has Ring</strong>: Indicates whether the mushroom has a ring (also called an annulus) around the stem, which is a remnant of the partial veil.</p>\n        </li>\n        <li><p><strong>Ring Type</strong>: Describes the type of ring present, such as a single ring, double ring, or a ring that is flaring or hanging.</p>\n        </li>\n        <li><p><strong>Spore Print Color</strong>: The color of the spore print obtained by placing the cap on a white sheet of paper. This is a critical identifying feature.</p>\n        </li>\n        <li><p><strong>Habitat</strong>: The environment where the mushroom is found, such as woodlands, grasslands, or urban areas. The habitat can help narrow down the possible species.</p>\n        </li>\n        <li><p><strong>Season</strong>: The time of year when the mushroom appears. Different species fruit in different seasons, which helps in identification.</p>\n        </li>\n    </ol>\n</div>","metadata":{}},{"cell_type":"markdown","source":"# Import Libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import StratifiedKFold, train_test_split, cross_val_score, cross_validate\nfrom sklearn.metrics import matthews_corrcoef, f1_score, confusion_matrix, ConfusionMatrixDisplay, make_scorer\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom scipy.stats import mode\n\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:10:29.506495Z","iopub.execute_input":"2024-08-20T12:10:29.506939Z","iopub.status.idle":"2024-08-20T12:10:34.512828Z","shell.execute_reply.started":"2024-08-20T12:10:29.506877Z","shell.execute_reply":"2024-08-20T12:10:34.51182Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Loading Data","metadata":{}},{"cell_type":"code","source":"train_df = pd.read_csv(\"/kaggle/input/playground-series-s4e8/train.csv\", index_col='id')\norig_df = pd.read_csv(\"/kaggle/input/secondary-mushroom-dataset-data-set/MushroomDataset/secondary_data.csv\", sep=\";\")\ntest_df = pd.read_csv(\"/kaggle/input/playground-series-s4e8/test.csv\", index_col='id')","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:10:34.514839Z","iopub.execute_input":"2024-08-20T12:10:34.515592Z","iopub.status.idle":"2024-08-20T12:10:50.358689Z","shell.execute_reply.started":"2024-08-20T12:10:34.515554Z","shell.execute_reply":"2024-08-20T12:10:50.357816Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df = pd.concat([train_df, orig_df], ignore_index=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:10:50.359796Z","iopub.execute_input":"2024-08-20T12:10:50.360104Z","iopub.status.idle":"2024-08-20T12:10:51.07855Z","shell.execute_reply.started":"2024-08-20T12:10:50.360078Z","shell.execute_reply":"2024-08-20T12:10:51.077533Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:10:51.080832Z","iopub.execute_input":"2024-08-20T12:10:51.081151Z","iopub.status.idle":"2024-08-20T12:10:51.113188Z","shell.execute_reply.started":"2024-08-20T12:10:51.081123Z","shell.execute_reply":"2024-08-20T12:10:51.112245Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:10:51.114382Z","iopub.execute_input":"2024-08-20T12:10:51.114682Z","iopub.status.idle":"2024-08-20T12:10:51.137272Z","shell.execute_reply.started":"2024-08-20T12:10:51.114659Z","shell.execute_reply":"2024-08-20T12:10:51.136347Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# EDA","metadata":{}},{"cell_type":"code","source":"train_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:10:51.138602Z","iopub.execute_input":"2024-08-20T12:10:51.138955Z","iopub.status.idle":"2024-08-20T12:10:51.158718Z","shell.execute_reply.started":"2024-08-20T12:10:51.138928Z","shell.execute_reply":"2024-08-20T12:10:51.157721Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.DataFrame({\n    'column': train_df.columns,\n    'null-count': train_df.isna().sum().values,\n    '% null-count': np.round(train_df.isna().sum().values*100/len(train_df),6)\n}).sort_values(by='null-count', ascending=False).reset_index(drop=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:10:51.160042Z","iopub.execute_input":"2024-08-20T12:10:51.160361Z","iopub.status.idle":"2024-08-20T12:10:59.748695Z","shell.execute_reply.started":"2024-08-20T12:10:51.160331Z","shell.execute_reply":"2024-08-20T12:10:59.747816Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.describe().T","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:10:59.749965Z","iopub.execute_input":"2024-08-20T12:10:59.75024Z","iopub.status.idle":"2024-08-20T12:11:00.238387Z","shell.execute_reply.started":"2024-08-20T12:10:59.750216Z","shell.execute_reply":"2024-08-20T12:11:00.237476Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.describe(include='O').T","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:00.239497Z","iopub.execute_input":"2024-08-20T12:11:00.239777Z","iopub.status.idle":"2024-08-20T12:11:12.294784Z","shell.execute_reply.started":"2024-08-20T12:11:00.239753Z","shell.execute_reply":"2024-08-20T12:11:12.293847Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:12.297846Z","iopub.execute_input":"2024-08-20T12:11:12.298135Z","iopub.status.idle":"2024-08-20T12:11:19.908957Z","shell.execute_reply.started":"2024-08-20T12:11:12.29811Z","shell.execute_reply":"2024-08-20T12:11:19.90811Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df.drop_duplicates(inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:19.910176Z","iopub.execute_input":"2024-08-20T12:11:19.910515Z","iopub.status.idle":"2024-08-20T12:11:28.260328Z","shell.execute_reply.started":"2024-08-20T12:11:19.910486Z","shell.execute_reply":"2024-08-20T12:11:28.2593Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"target = 'class'","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:28.261989Z","iopub.execute_input":"2024-08-20T12:11:28.262438Z","iopub.status.idle":"2024-08-20T12:11:28.267933Z","shell.execute_reply.started":"2024-08-20T12:11:28.262398Z","shell.execute_reply":"2024-08-20T12:11:28.266978Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"features = train_df.drop(target, axis=1).columns.to_list()\nfeatures","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:28.269282Z","iopub.execute_input":"2024-08-20T12:11:28.269789Z","iopub.status.idle":"2024-08-20T12:11:29.017621Z","shell.execute_reply.started":"2024-08-20T12:11:28.269762Z","shell.execute_reply":"2024-08-20T12:11:29.01672Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"features_with_high_null_values = [feature for feature in features if (train_df[feature].isna().sum()/len(train_df)*100)>20]\nfeatures_with_high_null_values","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:29.018892Z","iopub.execute_input":"2024-08-20T12:11:29.019234Z","iopub.status.idle":"2024-08-20T12:11:32.939179Z","shell.execute_reply.started":"2024-08-20T12:11:29.019202Z","shell.execute_reply":"2024-08-20T12:11:32.9383Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"categorical_features = train_df[features].select_dtypes(include='object').columns.to_list()\ncategorical_features","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:32.940182Z","iopub.execute_input":"2024-08-20T12:11:32.940443Z","iopub.status.idle":"2024-08-20T12:11:35.934008Z","shell.execute_reply.started":"2024-08-20T12:11:32.940419Z","shell.execute_reply":"2024-08-20T12:11:35.933052Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"numerical_features = list(set(features) - set(categorical_features))\nnumerical_features","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:35.935239Z","iopub.execute_input":"2024-08-20T12:11:35.935532Z","iopub.status.idle":"2024-08-20T12:11:35.941629Z","shell.execute_reply.started":"2024-08-20T12:11:35.935507Z","shell.execute_reply":"2024-08-20T12:11:35.940772Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.concat([train_df, test_df])[categorical_features].describe(include='O').T","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:11:35.942608Z","iopub.execute_input":"2024-08-20T12:11:35.942896Z","iopub.status.idle":"2024-08-20T12:11:57.076981Z","shell.execute_reply.started":"2024-08-20T12:11:35.942871Z","shell.execute_reply":"2024-08-20T12:11:57.075998Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Distribution of Categorical Features","metadata":{}},{"cell_type":"code","source":"for i, col in enumerate(categorical_features):\n    plt.figure(figsize=(8, 6))\n    \n    fil_data = train_df[col].value_counts()\n    fil_cat = fil_data[fil_data>=100].index\n    fil_df = train_df[train_df[col].isin(fil_cat)]\n    \n    sns.countplot(x=col, hue=target, data=fil_df)\n    \n    plt.title(f\"Count Plot of {col}\", size=20)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:22:58.633229Z","iopub.execute_input":"2024-08-20T12:22:58.634256Z","iopub.status.idle":"2024-08-20T12:24:27.849234Z","shell.execute_reply.started":"2024-08-20T12:22:58.63422Z","shell.execute_reply":"2024-08-20T12:24:27.84838Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 15))\nfor i, col in enumerate(numerical_features):\n    plt.subplot(3, 1, i+1)\n    sns.histplot(x=col, hue=target, data=train_df, kde=True, bins=20)\n    plt.title(f\"Histogram of {col}\", size=20)\n    sns.despine()\nplt.tight_layout()\nplt.suptitle(\"Distribution of Numerical Features\", y=1.05, size=28)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:27:15.780689Z","iopub.execute_input":"2024-08-20T12:27:15.781326Z","iopub.status.idle":"2024-08-20T12:28:12.083731Z","shell.execute_reply.started":"2024-08-20T12:27:15.781292Z","shell.execute_reply":"2024-08-20T12:28:12.082754Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 15))\nfor i, col in enumerate(numerical_features):\n    plt.subplot(3, 1, i+1)\n    sns.boxplot(x=col, y=target, hue=target, data=train_df)\n    plt.title(f\"Boxplot of {col}\", size=20)\nplt.tight_layout()\nplt.suptitle(\"Boxplot of Numerical Features\", y=1.05, size=28)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:31:15.709792Z","iopub.execute_input":"2024-08-20T12:31:15.710503Z","iopub.status.idle":"2024-08-20T12:31:30.708052Z","shell.execute_reply.started":"2024-08-20T12:31:15.71047Z","shell.execute_reply":"2024-08-20T12:31:30.707121Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(8, 15))\nfor i, col in enumerate(numerical_features):\n    plt.subplot(3, 1, i+1)\n    sns.violinplot(x=target, y=col, hue=target, data=train_df)\n    plt.title(f\"Violin Plot of {col}\", size=20)\nplt.tight_layout()\nplt.suptitle(\"Violin Plots of Numerical Features\", y=1.05, size=28)\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-20T12:32:00.919565Z","iopub.execute_input":"2024-08-20T12:32:00.919956Z","iopub.status.idle":"2024-08-20T12:32:31.868969Z","shell.execute_reply.started":"2024-08-20T12:32:00.919925Z","shell.execute_reply":"2024-08-20T12:32:31.867994Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Target Distribution","metadata":{}},{"cell_type":"code","source":"plt.figure(figsize=(10, 6))\nsns.countplot(x=target, data=train_df)\nplt.title(\"Target Distribution\", size=28)\nplt.plot()","metadata":{"execution":{"iopub.status.busy":"2024-08-11T06:32:18.046511Z","iopub.execute_input":"2024-08-11T06:32:18.046842Z","iopub.status.idle":"2024-08-11T06:32:21.104482Z","shell.execute_reply.started":"2024-08-11T06:32:18.046812Z","shell.execute_reply":"2024-08-11T06:32:21.103562Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Imputing Null Values","metadata":{}},{"cell_type":"code","source":"def cleaner(df):\n    for col in categorical_features:\n        df[col] = df[col].fillna('missing')\n        df.loc[df[col].value_counts(dropna=False)[df[col]].values < 100, col] = \"noise\"\n        df[col] = df[col].astype('category')\n\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-08-17T10:21:59.287669Z","iopub.execute_input":"2024-08-17T10:21:59.28802Z","iopub.status.idle":"2024-08-17T10:21:59.29399Z","shell.execute_reply.started":"2024-08-17T10:21:59.287994Z","shell.execute_reply":"2024-08-17T10:21:59.29285Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train_df = cleaner(train_df)\ntest_df = cleaner(test_df)","metadata":{"execution":{"iopub.status.busy":"2024-08-17T10:22:02.153672Z","iopub.execute_input":"2024-08-17T10:22:02.154015Z","iopub.status.idle":"2024-08-17T10:22:31.155272Z","shell.execute_reply.started":"2024-08-17T10:22:02.153988Z","shell.execute_reply":"2024-08-17T10:22:31.154481Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cap_diameter_mean = pd.concat([train_df['cap-diameter'], test_df['cap-diameter']]).mean(numeric_only=True)\ntrain_df['cap-diameter'].fillna(cap_diameter_mean, inplace=True)\ntest_df['cap-diameter'].fillna(cap_diameter_mean, inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-08-17T10:22:31.157144Z","iopub.execute_input":"2024-08-17T10:22:31.158008Z","iopub.status.idle":"2024-08-17T10:22:31.220402Z","shell.execute_reply.started":"2024-08-17T10:22:31.157972Z","shell.execute_reply":"2024-08-17T10:22:31.219517Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Model Training","metadata":{}},{"cell_type":"code","source":"X = train_df.copy()\ny = X.pop(target)\n\nlab_enc = LabelEncoder().fit(y)\ny = lab_enc.transform(y)","metadata":{"execution":{"iopub.status.busy":"2024-08-17T10:22:31.221581Z","iopub.execute_input":"2024-08-17T10:22:31.221918Z","iopub.status.idle":"2024-08-17T10:22:32.038267Z","shell.execute_reply.started":"2024-08-17T10:22:31.221888Z","shell.execute_reply":"2024-08-17T10:22:32.037474Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def model_report(estimator, X, y, cv=5):\n    print(\"=\"*80)\n    print(f\"    Model: {estimator.__class__.__name__}\")\n    print(\"=\"*80)\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=1/cv, shuffle=True, stratify=y, random_state=42)\n    \n    estimator.fit(X_train, y_train)\n    y_pred = estimator.predict(X_test)\n    f1 = f1_score(y_test, y_pred)\n    mcc = matthews_corrcoef(y_test, y_pred)\n    print(f\"F1 Score : {f1.mean():.6f}\")\n    print(f\"MCC Score: {mcc.mean():.6f}\")\n    \n    ConfusionMatrixDisplay(confusion_matrix(y_test, y_pred)).plot()\n    plt.title(\"Confusion Matrix\")\n    plt.show()\n\n    print()","metadata":{"execution":{"iopub.status.busy":"2024-08-17T10:22:33.008447Z","iopub.execute_input":"2024-08-17T10:22:33.009231Z","iopub.status.idle":"2024-08-17T10:22:33.015837Z","shell.execute_reply.started":"2024-08-17T10:22:33.009204Z","shell.execute_reply":"2024-08-17T10:22:33.014778Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def model_trainer(model, X, y, n_splits=5, random_state=42):\n    skfold = StratifiedKFold(n_splits=n_splits, shuffle=True, random_state=random_state)\n    \n    oof_probs, oof_mccs = [], []\n    print(\"=\"*80)\n    print(f\"Training {model.__class__.__name__}\")\n    print(\"=\"*80, end=\"\\n\")\n    for fold, (train_idx, test_idx) in enumerate(skfold.split(X, y)):\n        X_train, y_train = X.iloc[train_idx, :], y[train_idx]\n        X_test, y_test = X.iloc[test_idx, :], y[test_idx]\n        \n        model.fit(X_train, y_train)\n        y_pred = model.predict(X_test)\n        \n        mcc = matthews_corrcoef(y_pred, y_test)\n        oof_mccs.append(mcc)\n        oof_probs.append(model.predict_proba(test_df))\n        print(f\"--- Fold {fold+1} MCC Score: {mcc:.6f}\")\n    print(f\"\\n---> Mean MCC Score: {np.mean(oof_mccs):.6f} \\xb1 {np.std(oof_mccs):.6f}\\n\\n\")\n    return oof_probs, oof_mccs","metadata":{"execution":{"iopub.status.busy":"2024-08-17T10:22:34.414604Z","iopub.execute_input":"2024-08-17T10:22:34.41518Z","iopub.status.idle":"2024-08-17T10:22:34.423208Z","shell.execute_reply.started":"2024-08-17T10:22:34.415154Z","shell.execute_reply":"2024-08-17T10:22:34.422105Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Baseline Models","metadata":{}},{"cell_type":"code","source":"xgb_clf = XGBClassifier(enable_categorical=True, device=\"cuda\", tree_method=\"hist\")\n\nmodel_report(xgb_clf, X, y)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T13:58:16.128902Z","iopub.execute_input":"2024-08-15T13:58:16.129259Z","iopub.status.idle":"2024-08-15T13:58:22.648023Z","shell.execute_reply.started":"2024-08-15T13:58:16.129231Z","shell.execute_reply":"2024-08-15T13:58:22.647161Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"cat_clf = CatBoostClassifier(\n    cat_features=categorical_features,\n    verbose=False,\n    allow_writing_files=False,\n    task_type=\"GPU\"\n)\n\nmodel_report(cat_clf, X, y)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T13:58:22.649444Z","iopub.execute_input":"2024-08-15T13:58:22.649743Z","iopub.status.idle":"2024-08-15T14:00:14.708688Z","shell.execute_reply.started":"2024-08-15T13:58:22.649718Z","shell.execute_reply":"2024-08-15T14:00:14.707833Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"lgb_clf = LGBMClassifier(device='gpu', verbosity=-1)\n\nmodel_report(lgb_clf, X, y)","metadata":{"execution":{"iopub.status.busy":"2024-08-15T14:00:14.709714Z","iopub.execute_input":"2024-08-15T14:00:14.709963Z","iopub.status.idle":"2024-08-15T14:00:41.739627Z","shell.execute_reply.started":"2024-08-15T14:00:14.70994Z","shell.execute_reply":"2024-08-15T14:00:41.738722Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Hyperparameter Tuning","metadata":{}},{"cell_type":"code","source":"# import optuna\n# from optuna.samplers import TPESampler","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-08-15T14:00:41.742005Z","iopub.execute_input":"2024-08-15T14:00:41.742277Z","iopub.status.idle":"2024-08-15T14:00:41.746263Z","shell.execute_reply.started":"2024-08-15T14:00:41.742252Z","shell.execute_reply":"2024-08-15T14:00:41.745261Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.2, shuffle=True, stratify=y, random_state=101)","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-08-15T14:00:41.747395Z","iopub.execute_input":"2024-08-15T14:00:41.747762Z","iopub.status.idle":"2024-08-15T14:00:41.75924Z","shell.execute_reply.started":"2024-08-15T14:00:41.747732Z","shell.execute_reply":"2024-08-15T14:00:41.758299Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def objective(trial):\n#     params = {\n#         \"n_estimators\": trial.suggest_int(\"n_estimators\", 2000, 3000),\n#         \"eta\": trial.suggest_float(\"eta\", 1e-3, 1e-2),\n#         \"gamma\": trial.suggest_float(\"gamma\", 0, 5.0),\n#         \"max_depth\": trial.suggest_int(\"max_depth\", 2, 32),\n#         \"min_child_weight\": trial.suggest_int(\"min_child_weight\", 40, 100),\n#         \"subsample\": trial.suggest_float(\"subsample\", 0.1, 1.0),\n#         \"colsample_bytree\": trial.suggest_float(\"colsample_bytree\", 0.1, 1.0),\n#         \"grow_policy\": trial.suggest_categorical(\"grow_policy\", [\"depthwise\", \"lossguide\"]),\n#         \"max_leaves\": trial.suggest_int(\"max_leaves\", 16, 84)\n#     }\n#     params['device'] = 'cuda'\n#     params['tree_method'] = 'hist'\n#     params['enable_categorical'] = True\n    \n#     model = XGBClassifier(**params)\n#     model.fit(X_train, y_train)\n    \n#     y_pred = model.predict(X_test)\n#     return matthews_corrcoef(y_test, y_pred)\n\n\n# study_name = \"xgb\"\n# storage = \"sqlite:///xgb.db\"\n\n# study = optuna.create_study(storage=storage,\n#                             study_name=study_name,\n#                             direction=\"maximize\",\n# #                             sampler=TPESampler(),\n#                             load_if_exists=True)\n\n# study.optimize(objective, n_trials=100)\n\n# print(study.best_params)\n","metadata":{"scrolled":true,"_kg_hide-input":true,"_kg_hide-output":true,"execution":{"iopub.status.busy":"2024-08-15T14:00:41.76036Z","iopub.execute_input":"2024-08-15T14:00:41.760645Z","iopub.status.idle":"2024-08-15T14:00:41.771566Z","shell.execute_reply.started":"2024-08-15T14:00:41.760623Z","shell.execute_reply":"2024-08-15T14:00:41.770642Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def objective(trial):\n#     params = {\n#         \"iterations\": trial.suggest_int(\"iterations\", 100, 3000),\n#         \"learning_rate\": trial.suggest_float(\"learning_rate\", 1e-3, 1e-1, log=True),\n#         \"depth\": trial.suggest_int(\"depth\", 4, 10),\n#         \"l2_leaf_reg\": trial.suggest_float(\"l2_leaf_reg\", 1e-8, 100.0, log=True),\n#         \"bootstrap_type\": trial.suggest_categorical(\"bootstrap_type\", [\"Bayesian\"]),\n#         \"random_strength\": trial.suggest_float(\"random_strength\", 1e-8, 10.0, log=True),\n#         \"bagging_temperature\": trial.suggest_float(\"bagging_temperature\", 0.0, 10.0),\n#         \"od_type\": trial.suggest_categorical(\"od_type\", [\"IncToDec\", \"Iter\"]),\n#         \"od_wait\": trial.suggest_int(\"od_wait\", 10, 50),\n#         \"verbose\": False,\n#         \"allow_writing_files\": False,\n#         \"task_type\": 'GPU',\n#         \"cat_features\": categorical_features\n#     }\n\n#     model = CatBoostClassifier(**params)\n\n#     model.fit(X_train, y_train)\n#     y_pred = model.predict(X_test)\n#     return matthews_corrcoef(y_test, y_pred)\n\n\n# study_name = \"cat\"\n# storage = \"sqlite:///cat.db\"\n\n# study = optuna.create_study(storage=storage,\n#                             study_name=study_name,\n#                             direction=\"maximize\",\n#                             sampler=TPESampler(n_startup_trials=20, multivariate=True),\n#                             load_if_exists=True)\n\n# study.optimize(objective, n_trials=50)\n\n# print(study.best_params)","metadata":{"scrolled":true,"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-08-15T14:00:41.772559Z","iopub.execute_input":"2024-08-15T14:00:41.772832Z","iopub.status.idle":"2024-08-15T14:00:41.782481Z","shell.execute_reply.started":"2024-08-15T14:00:41.77281Z","shell.execute_reply":"2024-08-15T14:00:41.781711Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# def objective(trial):\n#     params = {\n#         \"lambda_l1\": trial.suggest_float(\"lambda_l1\", 1e-8, 10.0, log=True),\n#         \"lambda_l2\": trial.suggest_float(\"lambda_l2\", 1e-8, 10.0, log=True),\n#         \"num_leaves\": trial.suggest_int(\"num_leaves\", 2, 256),\n#         \"feature_fraction\": trial.suggest_float(\"feature_fraction\", 0.4, 1.0),\n#         \"bagging_fraction\": trial.suggest_float(\"bagging_fraction\", 0.4, 1.0),\n#         \"bagging_freq\": trial.suggest_int(\"bagging_freq\", 1, 7),\n#         \"min_child_samples\": trial.suggest_int(\"min_child_samples\", 5, 100),\n#         \"device\": 'gpu',\n#         \"verbosity\": -1\n#     }\n\n#     model = LGBMClassifier(**params)\n\n#     model.fit(X_train, y_train)\n#     y_pred = model.predict(X_test)\n#     return matthews_corrcoef(y_test, y_pred)\n\n\n# study_name = \"lgb\"\n# storage = \"sqlite:///lgb.db\"\n\n# study = optuna.create_study(storage=storage,\n#                             study_name=study_name,\n#                             direction=\"maximize\",\n#                             sampler=TPESampler(n_startup_trials=20, multivariate=True),\n#                             load_if_exists=True)\n\n# study.optimize(objective, n_trials=100)\n\n# print(study.best_params)","metadata":{"scrolled":true,"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-08-15T14:00:41.783464Z","iopub.execute_input":"2024-08-15T14:00:41.783744Z","iopub.status.idle":"2024-08-15T14:00:41.794922Z","shell.execute_reply.started":"2024-08-15T14:00:41.783721Z","shell.execute_reply":"2024-08-15T14:00:41.79416Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"xgb_params = {\n    'n_estimators': 2407,\n    'eta': 0.009462133032592785,\n    'gamma': 0.2865859948765318,\n    'max_depth': 31,\n    'min_child_weight': 47,\n    'subsample': 0.6956431754146083,\n    'colsample_bytree': 0.3670732604094118,\n    'grow_policy': 'lossguide',\n    'max_leaves': 73,\n    'enable_categorical': True,\n    'n_jobs': -1,\n    'device': 'cuda',\n    'tree_method': 'hist'\n} # 0.9844272567086021\n\ncat_params = {\n    'iterations': 1041,\n    'learning_rate': 0.08777255350163136,\n    'depth': 10,\n    'l2_leaf_reg': 0.1259643500248322,\n    'bootstrap_type': 'Bayesian',\n    'random_strength': 4.276181166674371e-08,\n    'bagging_temperature': 0.35995482350907326,\n    'od_type': 'Iter',\n    'od_wait': 39,\n    \"verbose\": False,\n    \"allow_writing_files\": False,\n    \"task_type\": 'GPU',\n    \"cat_features\": categorical_features\n} # 0.9841773055825763\n\nlgb_params = {\n    'n_estimators': 2500,\n    'random_state':42,\n    'max_bin':1024,\n    'colsample_bytree':0.6,\n    'reg_lambda': 80,\n#     'device': 'gpu',\n    'verbosity': -1\n}","metadata":{"_kg_hide-input":false,"execution":{"iopub.status.busy":"2024-08-17T10:22:58.939372Z","iopub.execute_input":"2024-08-17T10:22:58.939738Z","iopub.status.idle":"2024-08-17T10:22:58.947088Z","shell.execute_reply.started":"2024-08-17T10:22:58.939712Z","shell.execute_reply":"2024-08-17T10:22:58.946204Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Prediction","metadata":{}},{"cell_type":"code","source":"oof_probs = {}\n# oof_probs['xgb'], _ = model_trainer(XGBClassifier(**xgb_params), X, y, random_state=101)\n# oof_probs['cat'], _ = model_trainer(CatBoostClassifier(**cat_params), X, y, random_state=101)\noof_probs['lgb'], _ = model_trainer(LGBMClassifier(**lgb_params), X, y, random_state=101)","metadata":{"execution":{"iopub.status.busy":"2024-08-17T10:34:50.058052Z","iopub.execute_input":"2024-08-17T10:34:50.05888Z","iopub.status.idle":"2024-08-17T11:07:02.916433Z","shell.execute_reply.started":"2024-08-17T10:34:50.058849Z","shell.execute_reply":"2024-08-17T11:07:02.915456Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"oof_preds = {}\nfor model in oof_probs.keys():\n    oof_preds[model] = np.argmax(np.mean(oof_probs[model], axis=0), axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-08-17T11:08:22.544652Z","iopub.execute_input":"2024-08-17T11:08:22.545364Z","iopub.status.idle":"2024-08-17T11:08:22.878718Z","shell.execute_reply.started":"2024-08-17T11:08:22.545333Z","shell.execute_reply":"2024-08-17T11:08:22.877672Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Submission","metadata":{}},{"cell_type":"code","source":"sub = pd.read_csv(\"/kaggle/input/playground-series-s4e8/sample_submission.csv\")\npreds = [pred for model, pred in oof_preds.items()]\nmd = mode(preds, axis=0)[0] if len(preds)>1 else preds[0]\nsub[target] = lab_enc.inverse_transform(md)\nsub.to_csv(\"submission.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T09:35:02.570931Z","iopub.execute_input":"2024-08-14T09:35:02.571361Z","iopub.status.idle":"2024-08-14T09:35:05.654647Z","shell.execute_reply.started":"2024-08-14T09:35:02.571327Z","shell.execute_reply":"2024-08-14T09:35:05.653556Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"ext1 = pd.read_csv(\"/kaggle/input/mario-s-nightmare-15-th-place-solution/submission.csv\")[target].ravel()\next2 = pd.read_csv(\"/kaggle/input/ps4e8-binary-class-mathews-correlation-coeff/submission.csv\")[target].ravel()\next3 = pd.read_csv(\"/kaggle/input/playgrounds4e08-modeblend/submission.csv\")[target].ravel()\next4 = pd.read_csv(\"/kaggle/input/autogloun-t8-dslanders/submission.csv\")[target].ravel()\next5 = pd.read_csv(\"/kaggle/input/mario-s-nightmare-denselight-0-990/submission_test7.csv\")[target].ravel()","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-08-17T11:09:03.383341Z","iopub.execute_input":"2024-08-17T11:09:03.383729Z","iopub.status.idle":"2024-08-17T11:09:05.081013Z","shell.execute_reply.started":"2024-08-17T11:09:03.383701Z","shell.execute_reply":"2024-08-17T11:09:05.080232Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"preds = [ext1, ext2, ext3, ext4, ext5]\n\npreds = [lab_enc.transform(x) for x in preds]","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-08-17T11:09:08.401859Z","iopub.execute_input":"2024-08-17T11:09:08.402774Z","iopub.status.idle":"2024-08-17T11:09:09.580164Z","shell.execute_reply.started":"2024-08-17T11:09:08.402742Z","shell.execute_reply":"2024-08-17T11:09:09.579093Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"md = mode(preds, axis=0)[0]","metadata":{"_kg_hide-input":true,"execution":{"iopub.status.busy":"2024-08-17T11:09:28.669296Z","iopub.execute_input":"2024-08-17T11:09:28.669668Z","iopub.status.idle":"2024-08-17T11:11:14.357079Z","shell.execute_reply.started":"2024-08-17T11:09:28.669638Z","shell.execute_reply":"2024-08-17T11:11:14.356181Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sub[target] = lab_enc.inverse_transform(md)\nsub.to_csv(\"submission.csv\", index=False)","metadata":{"execution":{"iopub.status.busy":"2024-08-14T09:52:27.295162Z","iopub.execute_input":"2024-08-14T09:52:27.295497Z","iopub.status.idle":"2024-08-14T09:52:29.887618Z","shell.execute_reply.started":"2024-08-14T09:52:27.29547Z","shell.execute_reply":"2024-08-14T09:52:29.886658Z"},"_kg_hide-input":true,"trusted":true},"outputs":[],"execution_count":null}]}